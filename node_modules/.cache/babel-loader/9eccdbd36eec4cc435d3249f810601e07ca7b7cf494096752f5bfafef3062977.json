{"ast":null,"code":"var _jsxFileName = \"/Users/sol/Documents/GitHub/basic_solution_react/src/components/component/admin/MenuListBox.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, MouseSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport MenuDepth1 from \"./MenuDepth1\";\nimport UnusedMenu from \"./UnusedMenu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MenuListBox = props => {\n  _s();\n  const [list, setList] = useState([]);\n  const [liClasses, setLiClasses] = useState({});\n  const [li2Classes, setLi2Classes] = useState({});\n  const [unusedList, setUnusedList] = useState([]);\n  const [unusedMenu, setUnusedMenu] = useState(0);\n  const [unusedMenuOn, setUnusedMenuOn] = useState(false);\n  const [menuIdList, setMenuIdList] = useState([]);\n  const [assiDnd, setAssiDnd] = useState(false);\n  const [assiDndEnd, setAssiDndEnd] = useState(false);\n  const [liOnIdx, setLiOnIdx] = useState(null);\n\n  // 메뉴 카테고리 리스트\n  useEffect(() => {\n    setList(props.list);\n    console.log(props.list);\n    const idList = props.list.map(menu => menu.id);\n    // idList.unshift(\"menu0\");\n\n    setMenuIdList(idList);\n  }, [props.list]);\n\n  //미사용 카테고리 리스트\n  useEffect(() => {\n    setUnusedList(props.unusedList);\n\n    // 미사용카테고리 개수\n    const num = props.unusedList[0].list.length + props.unusedList[1].list.length;\n    setUnusedMenu(num);\n  }, [props.unusedList]);\n\n  //1뎁스 메뉴토글버튼 클릭시\n  const liFolderHandler = index => {\n    // 버튼을 클릭하면 해당 인덱스의 liClasses 상태를 토글합니다.\n    setLiClasses(prevClasses => ({\n      ...prevClasses,\n      [index]: !prevClasses[index] // 토글\n    }));\n\n    setLiOnIdx(index);\n\n    // // index-로 시작하는 모든 키를 false로 설정합니다.\n    // const updatedClasses = { ...li2Classes };\n    // for (let key in updatedClasses) {\n    //     if (key.startsWith(`${index}-`)) {\n    //         updatedClasses[key] = false;\n    //     }\n    // }\n\n    // // 변경된 li2Classes를 설정합니다.\n    // setLi2Classes(updatedClasses);\n  };\n\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 5\n    }\n  }), useSensor(MouseSensor, {\n    activationConstraint: {\n      distance: 5\n    }\n  }), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n  const handleDragStart = () => {\n    // console.log('dnd 시작');\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    console.log(event);\n\n    // if(active.id.includes(\"depth1_\") && over.id.includes(\"depth1_\")){\n\n    if (active.id !== over.id) {\n      setList(items => {\n        const oldIndex = items.findIndex(item => item.id === active.id);\n        const newIndex = items.findIndex(item => item.id === over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n    setAssiDnd(true);\n    setAssiDndEnd(true);\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list_menu1\",\n      children: /*#__PURE__*/_jsxDEV(DndContext, {\n        sensors: sensors,\n        collisionDetection: closestCenter,\n        onDragStart: handleDragStart,\n        onDragEnd: handleDragEnd,\n        children: [/*#__PURE__*/_jsxDEV(SortableContext, {\n          items: list.map(menu => menu.id),\n          strategy: verticalListSortingStrategy,\n          children: list.map((cont, idx) => {\n            const isLiOn = liClasses[idx] ? 'on' : '';\n            return /*#__PURE__*/_jsxDEV(MenuDepth1, {\n              data: cont,\n              idx: idx,\n              liFolderBtnClickHandler: () => {\n                liFolderHandler(idx);\n              },\n              id: `depth1_${idx}`,\n              isLiOn: isLiOn,\n              liOnIdx: liOnIdx\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(UnusedMenu, {\n          data: unusedList,\n          id: \"unusedMenu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(MenuListBox, \"BjxOw8GJFMoJLuKIQ/PnFsUBilM=\", false, function () {\n  return [useSensors, useSensor, useSensor, useSensor];\n});\n_c = MenuListBox;\nexport default MenuListBox;\nvar _c;\n$RefreshReg$(_c, \"MenuListBox\");","map":{"version":3,"names":["useEffect","useState","DndContext","closestCenter","KeyboardSensor","PointerSensor","MouseSensor","useSensor","useSensors","arrayMove","SortableContext","sortableKeyboardCoordinates","verticalListSortingStrategy","MenuDepth1","UnusedMenu","jsxDEV","_jsxDEV","Fragment","_Fragment","MenuListBox","props","_s","list","setList","liClasses","setLiClasses","li2Classes","setLi2Classes","unusedList","setUnusedList","unusedMenu","setUnusedMenu","unusedMenuOn","setUnusedMenuOn","menuIdList","setMenuIdList","assiDnd","setAssiDnd","assiDndEnd","setAssiDndEnd","liOnIdx","setLiOnIdx","console","log","idList","map","menu","id","num","length","liFolderHandler","index","prevClasses","sensors","activationConstraint","distance","coordinateGetter","handleDragStart","handleDragEnd","event","active","over","items","oldIndex","findIndex","item","newIndex","children","className","collisionDetection","onDragStart","onDragEnd","strategy","cont","idx","isLiOn","data","liFolderBtnClickHandler","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sol/Documents/GitHub/basic_solution_react/src/components/component/admin/MenuListBox.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport {\n    DndContext,\n    closestCenter,\n    KeyboardSensor,\n    PointerSensor,\n    MouseSensor,\n    useSensor,\n    useSensors,\n} from '@dnd-kit/core';\nimport {\n    arrayMove,\n    SortableContext,\n    sortableKeyboardCoordinates,\n    verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\n\nimport MenuDepth1 from \"./MenuDepth1\";\nimport UnusedMenu from \"./UnusedMenu\";\n\n\nconst MenuListBox = (props) => {\n    const [list, setList] = useState([]);\n    const [liClasses, setLiClasses] = useState({});\n    const [li2Classes, setLi2Classes] = useState({});\n    const [unusedList, setUnusedList] = useState([]);\n    const [unusedMenu, setUnusedMenu] = useState(0);\n    const [unusedMenuOn, setUnusedMenuOn] = useState(false);\n\n    const [menuIdList, setMenuIdList] = useState([]);\n\n    const [assiDnd, setAssiDnd] = useState(false);\n    const [assiDndEnd, setAssiDndEnd] = useState(false);\n\n\n    const [liOnIdx, setLiOnIdx] = useState(null);\n\n\n    // 메뉴 카테고리 리스트\n    useEffect(()=>{\n        setList(props.list);\n        console.log(props.list);\n\n        const idList = props.list.map((menu) => menu.id);\n        // idList.unshift(\"menu0\");\n\n        setMenuIdList(idList);\n    },[props.list]);\n\n\n    //미사용 카테고리 리스트\n    useEffect(()=>{\n        setUnusedList(props.unusedList);\n\n        // 미사용카테고리 개수\n        const num = props.unusedList[0].list.length + props.unusedList[1].list.length;\n        setUnusedMenu(num);\n    },[props.unusedList]);\n\n\n    //1뎁스 메뉴토글버튼 클릭시\n    const liFolderHandler = (index) => {\n        // 버튼을 클릭하면 해당 인덱스의 liClasses 상태를 토글합니다.\n        setLiClasses((prevClasses) => ({\n            ...prevClasses,\n            [index]: !prevClasses[index], // 토글\n        }));\n\n        setLiOnIdx(index);\n      \n        // // index-로 시작하는 모든 키를 false로 설정합니다.\n        // const updatedClasses = { ...li2Classes };\n        // for (let key in updatedClasses) {\n        //     if (key.startsWith(`${index}-`)) {\n        //         updatedClasses[key] = false;\n        //     }\n        // }\n      \n        // // 변경된 li2Classes를 설정합니다.\n        // setLi2Classes(updatedClasses);\n    };\n\n\n\n    const sensors = useSensors(\n        useSensor(PointerSensor, {\n            activationConstraint: {\n              distance: 5,\n            },\n        }),\n        useSensor(MouseSensor, {\n            activationConstraint: {\n              distance: 5,\n            },\n        }),\n        useSensor(KeyboardSensor, {\n            coordinateGetter: sortableKeyboardCoordinates,\n        }),\n    );\n\n\n    const handleDragStart = () => {\n        // console.log('dnd 시작');\n\n    };\n\n\n    const handleDragEnd = (event) => {\n        const {active, over} = event;\n        console.log(event)\n        \n        // if(active.id.includes(\"depth1_\") && over.id.includes(\"depth1_\")){\n\n        \n        if (active.id !== over.id) {\n            setList((items) => {\n                const oldIndex = items.findIndex((item) => item.id === active.id);\n                const newIndex = items.findIndex((item) => item.id === over.id);\n\n                return arrayMove(items, oldIndex, newIndex);\n            });\n        }\n        setAssiDnd(true);\n        setAssiDndEnd(true);\n    // }\n    }\n    \n\n\n    return(<>\n        <ul className=\"list_menu1\">\n            <DndContext\n                sensors={sensors}\n                collisionDetection={closestCenter}\n                onDragStart={handleDragStart}\n                onDragEnd={handleDragEnd}\n            >\n                <SortableContext\n                    items={list.map((menu) => menu.id)}\n                    strategy={verticalListSortingStrategy}\n                >\n                    {list.map((cont,idx)=>{\n                        const isLiOn = liClasses[idx] ? 'on' : '';\n\n                        return(\n                            <MenuDepth1 \n                                key={idx}\n                                data={cont}\n                                idx={idx}\n                                liFolderBtnClickHandler={()=>{liFolderHandler(idx)}}\n                                id={`depth1_${idx}`}\n                                isLiOn={isLiOn}\n                                liOnIdx={liOnIdx}\n                            />\n                        );\n                    })}\n                </SortableContext>\n                \n\n                    {/* 미사용 카테고리 */}\n                    <UnusedMenu \n                        data={unusedList}\n                        id={\"unusedMenu\"}\n                    />\n                    {/* <li className={`disable_menu_wrap${unusedMenuOn ? \" on\" : \"\"}`} id=\"menu0\">\n                        <button type=\"button\" \n                            className=\"btn_disable_menu\"\n                            onClick={()=>{setUnusedMenuOn(!unusedMenuOn)}}\n                        >미사용 카테고리{unusedMenu > 0 && \"(\"+unusedMenu+\")\"}</button>\n                        <div className=\"disable_menu\">\n                            {unusedMenu > 0 ?\n                                <SortableContext items={[\"menu0\"]} id=\"menu0\">\n                                    <ul className=\"list_disable_menu\">\n                                        {unusedList[0].list.map((cont,i)=>{\n                                            return(\n                                                <li key={i}>\n                                                    <div className=\"menu menu1\">\n                                                        <span>{cont.name}</span>\n                                                        <div className=\"btn_wrap\">\n                                                            <button type=\"button\" className=\"btn_move\">카테고리 이동</button>\n                                                        </div>\n                                                    </div>\n                                                </li>\n                                            );\n                                        })}\n                                        {unusedList[1].list.map((cont,i)=>{\n                                            return(\n                                                <li key={i}>\n                                                    <div className=\"menu menu2\">\n                                                        <span>{cont.name}</span>\n                                                        <div className=\"btn_wrap\">\n                                                            <button type=\"button\" className=\"btn_move\">카테고리 이동</button>\n                                                        </div>\n                                                    </div>\n                                                </li>\n                                            );\n                                        })}\n                                    </ul>\n                                </SortableContext>\n                                : <div className=\"none_category\">카테고리가 없습니다.</div>\n                            }\n                        </div>\n                    </li> */}\n                \n\n\n                \n            </DndContext>\n\n           \n        </ul>\n    </>);\n};\n\nexport default MenuListBox;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}